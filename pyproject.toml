[tool.poetry]
name = "ramen-api"
version = "0.1.0"
description = "API for Ramen SNS"
authors = ["kohdice <kohdice@gmail.com>", "kazumasato0214"]

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.0.6"
djangorestframework = "^3.15.1"
django-filter = "^24.2"
markdown = "^3.6"

[tool.poetry.group.dev.dependencies]
ruff = "^0.2.0"
mypy = "^1.8.0"
pytest = "^8.0.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"
pytest-django = "^4.8.0"
taskipy = "^1.12.2"
debugpy = "^1.8.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "I", "N", "UP", "B", "A", "PT", "SIM", "DJ"]
ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.mypy]
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
omit = ["tests/*", ".venv/*"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.taskipy.tasks]
test = "pytest -s -vv --cov=. --cov-branch --cov-report=html"
fmt = "task fmt-sort && task fmt-ruff"
fmt-ruff = "ruff format ."
fmt-sort = "ruff check --select I --fix ."
fix = "ruff --fix ."
lint = "task lint-ruff && task lint-mypy"
lint-ruff = "ruff check ."
lint-mypy = "mypy ."
lint-diff = "ruff check --diff ."
